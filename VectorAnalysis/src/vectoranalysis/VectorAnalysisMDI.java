/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vectoranalysis;

import java.awt.Dimension;
import NDL_JavaClassLib.*;
import ij.process.FloatProcessor;
import java.io.File;
/**
 *
 * @author balam
 */
public class VectorAnalysisMDI extends javax.swing.JFrame {

    /**
     * Creates new form VectorAnalysisMDI
     */
    DataManager dManager = new DataManager();
    
    public VectorAnalysisMDI() {
       
        Dimension d = this.getMaximumSize();
        this.setSize(d);
        this.setTitle("Vector Analysis for Navigation");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        jFolderOptions = new javax.swing.JMenuItem();
        ImportMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        mapsMenu = new javax.swing.JMenu();
        residencemapMenuItem = new javax.swing.JMenuItem();
        analysisMenu = new javax.swing.JMenu();
        jMenuItemGrpID = new javax.swing.JMenuItem();
        jMenuItemExpDes = new javax.swing.JMenuItem();
        jMenuItemMeasure = new javax.swing.JMenuItem();
        jMenuItemCompute = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        jFolderOptions.setText("Folder Preferences");
        jFolderOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFolderOptionsActionPerformed(evt);
            }
        });
        fileMenu.add(jFolderOptions);

        ImportMenuItem.setText("Import Data");
        ImportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(ImportMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        mapsMenu.setText("Maps");

        residencemapMenuItem.setText("Create Residence Map");
        residencemapMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                residencemapMenuItemActionPerformed(evt);
            }
        });
        mapsMenu.add(residencemapMenuItem);

        menuBar.add(mapsMenu);

        analysisMenu.setText("Analysis");

        jMenuItemGrpID.setText("Identify Groups");
        analysisMenu.add(jMenuItemGrpID);

        jMenuItemExpDes.setText("Experimental Design");
        analysisMenu.add(jMenuItemExpDes);

        jMenuItemMeasure.setText("Select Measures");
        analysisMenu.add(jMenuItemMeasure);

        jMenuItemCompute.setText("Compute");
        jMenuItemCompute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemComputeActionPerformed(evt);
            }
        });
        analysisMenu.add(jMenuItemCompute);

        menuBar.add(analysisMenu);

        jMenu1.setText("Video/Image");

        jMenuItem1.setText("Zones");
        jMenu1.add(jMenuItem1);

        jMenuItem6.setText("Video Properties");
        jMenu1.add(jMenuItem6);

        menuBar.add(jMenu1);

        jMenu2.setText("Tracking");
        menuBar.add(jMenu2);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");
        editMenu.setEnabled(false);

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");
        helpMenu.setEnabled(false);

        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText("Contents");
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void ImportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportMenuItemActionPerformed
        // TODO add your handling code here:
        //Choose data file
        //Open datafile
        //Initialise the data using DataTrace
        //Calculate the velocity using differentiate function
        //Generate the residence time weighted heat map,velocity map, component along search center and orthogonal
        //Differentiate and produce the differentials
        var inpDataDialog = new MultiFileDialog(null,true);
        inpDataDialog.setVisible(true);
        var fNames = inpDataDialog.getSelectionArray();
        String [] failedFiles = new String[fNames.length];
        int sCount = 0,fCount = 0; //count of successfully opened files and count of files failed to open
        for(String name : fNames){
            var file = new File(name);
            if (file.exists())
                dManager.DataFileNames[sCount++]= name;
            else
                failedFiles[fCount++] = name;
        }
        dManager.readData(); 
        
    }//GEN-LAST:event_ImportMenuItemActionPerformed

    private void residencemapMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_residencemapMenuItemActionPerformed
        // TODO add your handling code here:
        int xRes = dManager.getXRes();
        int yRes = dManager.getYRes();
        
        JHeatMapArray residenceMap = new JHeatMapArray(dManager.getXRes(),dManager.getYRes());
        
        //dManager.aveHMap = new FloatProcessor(dManager.getXRes(),dManager.getYRes(),residenceMap.to1DArray());
       
        for(var timeTrace : dManager.getTimeData()){
            residenceMap.setTimeSeries(timeTrace);
            dManager.heatMap.add(new FloatProcessor(dManager.getXRes(),dManager.getYRes(),residenceMap.to1DArray()));
            //Check for memory if it is limiting then dump the heatmaps to disk preserving only the average.          
        }     
    }//GEN-LAST:event_residencemapMenuItemActionPerformed

    private void jFolderOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFolderOptionsActionPerformed
        // TODO add your handling code here:
        //Design GUI to let user select data folders, resutls folder etc.
        //These data are stored in datamanager. 
        //These options along with any other project specific details can be stored and retrived 
        //when the user saves the project. 
        
        
    }//GEN-LAST:event_jFolderOptionsActionPerformed

    private void jMenuItemComputeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemComputeActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenuItemComputeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VectorAnalysisMDI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VectorAnalysisMDI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VectorAnalysisMDI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VectorAnalysisMDI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new VectorAnalysisMDI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ImportMenuItem;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenu analysisMenu;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem jFolderOptions;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItemCompute;
    private javax.swing.JMenuItem jMenuItemExpDes;
    private javax.swing.JMenuItem jMenuItemGrpID;
    private javax.swing.JMenuItem jMenuItemMeasure;
    private javax.swing.JMenu mapsMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem residencemapMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
